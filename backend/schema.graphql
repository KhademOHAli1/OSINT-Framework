# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  role: String
  isActive: Boolean
  lastLogin: DateTime
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  role: StringNullableFilter
  isActive: BooleanFilter
  lastLogin: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: StringNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  role: OrderDirection
  isActive: OrderDirection
  lastLogin: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  role: String
  isActive: Boolean
  lastLogin: DateTime
  createdAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  role: String
  isActive: Boolean
  lastLogin: DateTime
  createdAt: DateTime
}

type Category {
  id: ID!
  name: String
  slug: String
  description: String
  color: String
  icon: String
  parentCategory: Category
  subCategories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryWhereUniqueInput): [Category!]
  subCategoriesCount(where: CategoryWhereInput! = {}): Int
  tools(where: ToolWhereInput! = {}, orderBy: [ToolOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ToolWhereUniqueInput): [Tool!]
  toolsCount(where: ToolWhereInput! = {}): Int
  sortOrder: Int
  isActive: Boolean
  createdAt: DateTime
}

input CategoryWhereUniqueInput {
  id: ID
  slug: String
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  description: StringFilter
  color: StringFilter
  icon: StringFilter
  parentCategory: CategoryWhereInput
  subCategories: CategoryManyRelationFilter
  tools: ToolManyRelationFilter
  sortOrder: IntNullableFilter
  isActive: BooleanFilter
  createdAt: DateTimeNullableFilter
}

input CategoryManyRelationFilter {
  every: CategoryWhereInput
  some: CategoryWhereInput
  none: CategoryWhereInput
}

input ToolManyRelationFilter {
  every: ToolWhereInput
  some: ToolWhereInput
  none: ToolWhereInput
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input CategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  description: OrderDirection
  color: OrderDirection
  icon: OrderDirection
  sortOrder: OrderDirection
  isActive: OrderDirection
  createdAt: OrderDirection
}

input CategoryUpdateInput {
  name: String
  slug: String
  description: String
  color: String
  icon: String
  parentCategory: CategoryRelateToOneForUpdateInput
  subCategories: CategoryRelateToManyForUpdateInput
  tools: ToolRelateToManyForUpdateInput
  sortOrder: Int
  isActive: Boolean
  createdAt: DateTime
}

input CategoryRelateToOneForUpdateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
  disconnect: Boolean
}

input CategoryRelateToManyForUpdateInput {
  disconnect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input ToolRelateToManyForUpdateInput {
  disconnect: [ToolWhereUniqueInput!]
  set: [ToolWhereUniqueInput!]
  create: [ToolCreateInput!]
  connect: [ToolWhereUniqueInput!]
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  name: String
  slug: String
  description: String
  color: String
  icon: String
  parentCategory: CategoryRelateToOneForCreateInput
  subCategories: CategoryRelateToManyForCreateInput
  tools: ToolRelateToManyForCreateInput
  sortOrder: Int
  isActive: Boolean
  createdAt: DateTime
}

input CategoryRelateToOneForCreateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
}

input CategoryRelateToManyForCreateInput {
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input ToolRelateToManyForCreateInput {
  create: [ToolCreateInput!]
  connect: [ToolWhereUniqueInput!]
}

type Tool {
  id: ID!
  name: String
  slug: String
  description: String
  longDescription: Tool_longDescription_Document
  url: String
  alternativeUrls: JSON
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryWhereUniqueInput): [Category!]
  categoriesCount(where: CategoryWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  type: String
  status: String
  isPaid: Boolean
  requiresRegistration: Boolean
  supportedRegions: JSON
  rating: Int
  usageCount: Int
  lastChecked: DateTime
  lastUpdated: DateTime
  submittedBy: User
  reviews(where: ReviewWhereInput! = {}, orderBy: [ReviewOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ReviewWhereUniqueInput): [Review!]
  reviewsCount(where: ReviewWhereInput! = {}): Int
  metadata: JSON
  sortOrder: Int
  isFeatured: Boolean
  isVerified: Boolean
  createdAt: DateTime
}

type Tool_longDescription_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ToolWhereUniqueInput {
  id: ID
  slug: String
}

input ToolWhereInput {
  AND: [ToolWhereInput!]
  OR: [ToolWhereInput!]
  NOT: [ToolWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  description: StringFilter
  url: StringFilter
  categories: CategoryManyRelationFilter
  tags: TagManyRelationFilter
  type: StringNullableFilter
  status: StringNullableFilter
  isPaid: BooleanFilter
  requiresRegistration: BooleanFilter
  rating: IntNullableFilter
  usageCount: IntNullableFilter
  lastChecked: DateTimeNullableFilter
  lastUpdated: DateTimeNullableFilter
  submittedBy: UserWhereInput
  reviews: ReviewManyRelationFilter
  sortOrder: IntNullableFilter
  isFeatured: BooleanFilter
  isVerified: BooleanFilter
  createdAt: DateTimeNullableFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input ReviewManyRelationFilter {
  every: ReviewWhereInput
  some: ReviewWhereInput
  none: ReviewWhereInput
}

input ToolOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  description: OrderDirection
  url: OrderDirection
  type: OrderDirection
  status: OrderDirection
  isPaid: OrderDirection
  requiresRegistration: OrderDirection
  rating: OrderDirection
  usageCount: OrderDirection
  lastChecked: OrderDirection
  lastUpdated: OrderDirection
  sortOrder: OrderDirection
  isFeatured: OrderDirection
  isVerified: OrderDirection
  createdAt: OrderDirection
}

input ToolUpdateInput {
  name: String
  slug: String
  description: String
  longDescription: JSON
  url: String
  alternativeUrls: JSON
  categories: CategoryRelateToManyForUpdateInput
  tags: TagRelateToManyForUpdateInput
  type: String
  status: String
  isPaid: Boolean
  requiresRegistration: Boolean
  supportedRegions: JSON
  rating: Int
  usageCount: Int
  lastChecked: DateTime
  lastUpdated: DateTime
  submittedBy: UserRelateToOneForUpdateInput
  reviews: ReviewRelateToManyForUpdateInput
  metadata: JSON
  sortOrder: Int
  isFeatured: Boolean
  isVerified: Boolean
  createdAt: DateTime
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input ReviewRelateToManyForUpdateInput {
  disconnect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  create: [ReviewCreateInput!]
  connect: [ReviewWhereUniqueInput!]
}

input ToolUpdateArgs {
  where: ToolWhereUniqueInput!
  data: ToolUpdateInput!
}

input ToolCreateInput {
  name: String
  slug: String
  description: String
  longDescription: JSON
  url: String
  alternativeUrls: JSON
  categories: CategoryRelateToManyForCreateInput
  tags: TagRelateToManyForCreateInput
  type: String
  status: String
  isPaid: Boolean
  requiresRegistration: Boolean
  supportedRegions: JSON
  rating: Int
  usageCount: Int
  lastChecked: DateTime
  lastUpdated: DateTime
  submittedBy: UserRelateToOneForCreateInput
  reviews: ReviewRelateToManyForCreateInput
  metadata: JSON
  sortOrder: Int
  isFeatured: Boolean
  isVerified: Boolean
  createdAt: DateTime
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input ReviewRelateToManyForCreateInput {
  create: [ReviewCreateInput!]
  connect: [ReviewWhereUniqueInput!]
}

type Tag {
  id: ID!
  name: String
  slug: String
  description: String
  color: String
  tools(where: ToolWhereInput! = {}, orderBy: [ToolOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ToolWhereUniqueInput): [Tool!]
  toolsCount(where: ToolWhereInput! = {}): Int
  usageCount: Int
  createdAt: DateTime
}

input TagWhereUniqueInput {
  id: ID
  slug: String
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  description: StringFilter
  color: StringFilter
  tools: ToolManyRelationFilter
  usageCount: IntNullableFilter
  createdAt: DateTimeNullableFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  description: OrderDirection
  color: OrderDirection
  usageCount: OrderDirection
  createdAt: OrderDirection
}

input TagUpdateInput {
  name: String
  slug: String
  description: String
  color: String
  tools: ToolRelateToManyForUpdateInput
  usageCount: Int
  createdAt: DateTime
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  slug: String
  description: String
  color: String
  tools: ToolRelateToManyForCreateInput
  usageCount: Int
  createdAt: DateTime
}

type Review {
  id: ID!
  tool: Tool
  user: User
  rating: Int
  title: String
  content: String
  isVerified: Boolean
  isHelpful: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input ReviewWhereUniqueInput {
  id: ID
}

input ReviewWhereInput {
  AND: [ReviewWhereInput!]
  OR: [ReviewWhereInput!]
  NOT: [ReviewWhereInput!]
  id: IDFilter
  tool: ToolWhereInput
  user: UserWhereInput
  rating: IntFilter
  title: StringFilter
  content: StringFilter
  isVerified: BooleanFilter
  isHelpful: IntNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input ReviewOrderByInput {
  id: OrderDirection
  rating: OrderDirection
  title: OrderDirection
  content: OrderDirection
  isVerified: OrderDirection
  isHelpful: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ReviewUpdateInput {
  tool: ToolRelateToOneForUpdateInput
  user: UserRelateToOneForUpdateInput
  rating: Int
  title: String
  content: String
  isVerified: Boolean
  isHelpful: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input ToolRelateToOneForUpdateInput {
  create: ToolCreateInput
  connect: ToolWhereUniqueInput
  disconnect: Boolean
}

input ReviewUpdateArgs {
  where: ReviewWhereUniqueInput!
  data: ReviewUpdateInput!
}

input ReviewCreateInput {
  tool: ToolRelateToOneForCreateInput
  user: UserRelateToOneForCreateInput
  rating: Int
  title: String
  content: String
  isVerified: Boolean
  isHelpful: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input ToolRelateToOneForCreateInput {
  create: ToolCreateInput
  connect: ToolWhereUniqueInput
}

type ToolUsage {
  id: ID!
  tool: Tool
  user: User
  ipAddress: String
  userAgent: String
  referrer: String
  sessionId: String
  timestamp: DateTime
}

input ToolUsageWhereUniqueInput {
  id: ID
}

input ToolUsageWhereInput {
  AND: [ToolUsageWhereInput!]
  OR: [ToolUsageWhereInput!]
  NOT: [ToolUsageWhereInput!]
  id: IDFilter
  tool: ToolWhereInput
  user: UserWhereInput
  ipAddress: StringFilter
  userAgent: StringFilter
  referrer: StringFilter
  sessionId: StringFilter
  timestamp: DateTimeNullableFilter
}

input ToolUsageOrderByInput {
  id: OrderDirection
  ipAddress: OrderDirection
  userAgent: OrderDirection
  referrer: OrderDirection
  sessionId: OrderDirection
  timestamp: OrderDirection
}

input ToolUsageUpdateInput {
  tool: ToolRelateToOneForUpdateInput
  user: UserRelateToOneForUpdateInput
  ipAddress: String
  userAgent: String
  referrer: String
  sessionId: String
  timestamp: DateTime
}

input ToolUsageUpdateArgs {
  where: ToolUsageWhereUniqueInput!
  data: ToolUsageUpdateInput!
}

input ToolUsageCreateInput {
  tool: ToolRelateToOneForCreateInput
  user: UserRelateToOneForCreateInput
  ipAddress: String
  userAgent: String
  referrer: String
  sessionId: String
  timestamp: DateTime
}

type SearchQuery {
  id: ID!
  query: String
  resultsCount: Int
  user: User
  ipAddress: String
  timestamp: DateTime
}

input SearchQueryWhereUniqueInput {
  id: ID
}

input SearchQueryWhereInput {
  AND: [SearchQueryWhereInput!]
  OR: [SearchQueryWhereInput!]
  NOT: [SearchQueryWhereInput!]
  id: IDFilter
  query: StringFilter
  resultsCount: IntNullableFilter
  user: UserWhereInput
  ipAddress: StringFilter
  timestamp: DateTimeNullableFilter
}

input SearchQueryOrderByInput {
  id: OrderDirection
  query: OrderDirection
  resultsCount: OrderDirection
  ipAddress: OrderDirection
  timestamp: OrderDirection
}

input SearchQueryUpdateInput {
  query: String
  resultsCount: Int
  user: UserRelateToOneForUpdateInput
  ipAddress: String
  timestamp: DateTime
}

input SearchQueryUpdateArgs {
  where: SearchQueryWhereUniqueInput!
  data: SearchQueryUpdateInput!
}

input SearchQueryCreateInput {
  query: String
  resultsCount: Int
  user: UserRelateToOneForCreateInput
  ipAddress: String
  timestamp: DateTime
}

type Collection {
  id: ID!
  name: String
  slug: String
  description: String
  tools(where: ToolWhereInput! = {}, orderBy: [ToolOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ToolWhereUniqueInput): [Tool!]
  toolsCount(where: ToolWhereInput! = {}): Int
  user: User
  isPublic: Boolean
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input CollectionWhereUniqueInput {
  id: ID
  slug: String
}

input CollectionWhereInput {
  AND: [CollectionWhereInput!]
  OR: [CollectionWhereInput!]
  NOT: [CollectionWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  description: StringFilter
  tools: ToolManyRelationFilter
  user: UserWhereInput
  isPublic: BooleanFilter
  tags: TagManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input CollectionOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  description: OrderDirection
  isPublic: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input CollectionUpdateInput {
  name: String
  slug: String
  description: String
  tools: ToolRelateToManyForUpdateInput
  user: UserRelateToOneForUpdateInput
  isPublic: Boolean
  tags: TagRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input CollectionUpdateArgs {
  where: CollectionWhereUniqueInput!
  data: CollectionUpdateInput!
}

input CollectionCreateInput {
  name: String
  slug: String
  description: String
  tools: ToolRelateToManyForCreateInput
  user: UserRelateToOneForCreateInput
  isPublic: Boolean
  tags: TagRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type NewsItem {
  id: ID!
  title: String
  slug: String
  summary: String
  content: NewsItem_content_Document
  author: User
  category: String
  relatedTools(where: ToolWhereInput! = {}, orderBy: [ToolOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ToolWhereUniqueInput): [Tool!]
  relatedToolsCount(where: ToolWhereInput! = {}): Int
  isPublished: Boolean
  publishedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

type NewsItem_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input NewsItemWhereUniqueInput {
  id: ID
  slug: String
}

input NewsItemWhereInput {
  AND: [NewsItemWhereInput!]
  OR: [NewsItemWhereInput!]
  NOT: [NewsItemWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  summary: StringFilter
  author: UserWhereInput
  category: StringNullableFilter
  relatedTools: ToolManyRelationFilter
  isPublished: BooleanFilter
  publishedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input NewsItemOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  summary: OrderDirection
  category: OrderDirection
  isPublished: OrderDirection
  publishedAt: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input NewsItemUpdateInput {
  title: String
  slug: String
  summary: String
  content: JSON
  author: UserRelateToOneForUpdateInput
  category: String
  relatedTools: ToolRelateToManyForUpdateInput
  isPublished: Boolean
  publishedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

input NewsItemUpdateArgs {
  where: NewsItemWhereUniqueInput!
  data: NewsItemUpdateInput!
}

input NewsItemCreateInput {
  title: String
  slug: String
  summary: String
  content: JSON
  author: UserRelateToOneForCreateInput
  category: String
  relatedTools: ToolRelateToManyForCreateInput
  isPublished: Boolean
  publishedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(where: CategoryWhereUniqueInput!, data: CategoryUpdateInput!): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  createTool(data: ToolCreateInput!): Tool
  createTools(data: [ToolCreateInput!]!): [Tool]
  updateTool(where: ToolWhereUniqueInput!, data: ToolUpdateInput!): Tool
  updateTools(data: [ToolUpdateArgs!]!): [Tool]
  deleteTool(where: ToolWhereUniqueInput!): Tool
  deleteTools(where: [ToolWhereUniqueInput!]!): [Tool]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createReview(data: ReviewCreateInput!): Review
  createReviews(data: [ReviewCreateInput!]!): [Review]
  updateReview(where: ReviewWhereUniqueInput!, data: ReviewUpdateInput!): Review
  updateReviews(data: [ReviewUpdateArgs!]!): [Review]
  deleteReview(where: ReviewWhereUniqueInput!): Review
  deleteReviews(where: [ReviewWhereUniqueInput!]!): [Review]
  createToolUsage(data: ToolUsageCreateInput!): ToolUsage
  createToolUsages(data: [ToolUsageCreateInput!]!): [ToolUsage]
  updateToolUsage(where: ToolUsageWhereUniqueInput!, data: ToolUsageUpdateInput!): ToolUsage
  updateToolUsages(data: [ToolUsageUpdateArgs!]!): [ToolUsage]
  deleteToolUsage(where: ToolUsageWhereUniqueInput!): ToolUsage
  deleteToolUsages(where: [ToolUsageWhereUniqueInput!]!): [ToolUsage]
  createSearchQuery(data: SearchQueryCreateInput!): SearchQuery
  createSearchQueries(data: [SearchQueryCreateInput!]!): [SearchQuery]
  updateSearchQuery(where: SearchQueryWhereUniqueInput!, data: SearchQueryUpdateInput!): SearchQuery
  updateSearchQueries(data: [SearchQueryUpdateArgs!]!): [SearchQuery]
  deleteSearchQuery(where: SearchQueryWhereUniqueInput!): SearchQuery
  deleteSearchQueries(where: [SearchQueryWhereUniqueInput!]!): [SearchQuery]
  createCollection(data: CollectionCreateInput!): Collection
  createCollections(data: [CollectionCreateInput!]!): [Collection]
  updateCollection(where: CollectionWhereUniqueInput!, data: CollectionUpdateInput!): Collection
  updateCollections(data: [CollectionUpdateArgs!]!): [Collection]
  deleteCollection(where: CollectionWhereUniqueInput!): Collection
  deleteCollections(where: [CollectionWhereUniqueInput!]!): [Collection]
  createNewsItem(data: NewsItemCreateInput!): NewsItem
  createNewsItems(data: [NewsItemCreateInput!]!): [NewsItem]
  updateNewsItem(where: NewsItemWhereUniqueInput!, data: NewsItemUpdateInput!): NewsItem
  updateNewsItems(data: [NewsItemUpdateArgs!]!): [NewsItem]
  deleteNewsItem(where: NewsItemWhereUniqueInput!): NewsItem
  deleteNewsItems(where: [NewsItemWhereUniqueInput!]!): [NewsItem]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryWhereUniqueInput): [Category!]
  category(where: CategoryWhereUniqueInput!): Category
  categoriesCount(where: CategoryWhereInput! = {}): Int
  tools(where: ToolWhereInput! = {}, orderBy: [ToolOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ToolWhereUniqueInput): [Tool!]
  tool(where: ToolWhereUniqueInput!): Tool
  toolsCount(where: ToolWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  reviews(where: ReviewWhereInput! = {}, orderBy: [ReviewOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ReviewWhereUniqueInput): [Review!]
  review(where: ReviewWhereUniqueInput!): Review
  reviewsCount(where: ReviewWhereInput! = {}): Int
  toolUsages(where: ToolUsageWhereInput! = {}, orderBy: [ToolUsageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ToolUsageWhereUniqueInput): [ToolUsage!]
  toolUsage(where: ToolUsageWhereUniqueInput!): ToolUsage
  toolUsagesCount(where: ToolUsageWhereInput! = {}): Int
  searchQueries(where: SearchQueryWhereInput! = {}, orderBy: [SearchQueryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SearchQueryWhereUniqueInput): [SearchQuery!]
  searchQuery(where: SearchQueryWhereUniqueInput!): SearchQuery
  searchQueriesCount(where: SearchQueryWhereInput! = {}): Int
  collections(where: CollectionWhereInput! = {}, orderBy: [CollectionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CollectionWhereUniqueInput): [Collection!]
  collection(where: CollectionWhereUniqueInput!): Collection
  collectionsCount(where: CollectionWhereInput! = {}): Int
  newsItems(where: NewsItemWhereInput! = {}, orderBy: [NewsItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: NewsItemWhereUniqueInput): [NewsItem!]
  newsItem(where: NewsItemWhereUniqueInput!): NewsItem
  newsItemsCount(where: NewsItemWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
